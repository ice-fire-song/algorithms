解法一：
#include<iostream>
#include<stdio.h>
#include<string.h>
#include<cmath>
using namespace std;

	int dp[8005][1010] = {{0}};
int main()
{
	
	int t;
 	int n,m,a,b,c,sum;
     scanf("%d",&t);
     while(t--)
     {
     
     	int w[100100]={0},v[100100]={0};
     	scanf("%d%d",&n,&m);
     	int f=1;
		 for(int i=1;i<=n;i++)
		 {
		 	scanf("%d%d%d",&a,&b,&c);
		 	
		 	 for(int k=0;k<32;k++)
		 	 {
		 	 	sum=pow(2,k);
		 	 	if(sum>c)break;
		 	 	else 
		 	 	{
		 	 		c-=sum;
		 	 		w[f]=sum*b;
		 	 		v[f]=sum*a;
		 	 		f++; 
				  }
			  }
		 	  w[f]=c*b;
		 	  v[f]=c*a;
		 	  f++;
		  } 
		  for(int i=1;i<f;i++)
		  {
		  	for(int k=1;k<=m;k++)
		  	{
		  		if(k<w[i]) dp[i][k]=dp[i-1][k];
		  		else 
		  		 dp[i][k]=max(dp[i-1][k],dp[i-1][k-w[i]]+v[i]);
			  }
		  }
		 printf("%d\n",dp[f-1][m]);
	 }




 } 

解法二：
#include <iostream>  
#include<string.h>
#include<algorithm>
using namespace std;  
   
int weight[1100],Value[1100],num[1100];  
int f[1100];  
int limit;  
   
inline void ZeroOnePack(int w,int v)  
{  
    int j;  
    for(j=limit;j>=w;j--)  
    {  
        if(f[j-w]+v > f[j])  
            f[j]=f[j-w]+v;  
    }  
}  
   
inline void CompletePack(int w,int v)  
{  
    int j;  
    for(j=w;j<=limit;j++)  
    {  
        if(f[j-w]+v > f[j])  
            f[j]=f[j-w]+v;  
    }  
}  
   
inline void MultiplePack(int w,int v,int amount)  
{  
    if(amount * w >= limit)  
    {  
        CompletePack(w,v);  
        return ;  
    }  
    for(int k=1;k<amount;k<<=1)  
    {  
        ZeroOnePack(k*w,k*v);  
        amount -= k;  
    }  
    ZeroOnePack(amount*w,amount*v);  
}  
   
int main()  
{  
    int T,n;  
    cin>>T;  
    while(T--)  
    {  
        cin>>n>>limit;  
           
        for(int i=0;i<n;i++)  
            cin>>Value[i]>>weight[i]>>num[i];  
           
        memset(f,0,sizeof(f));  
           
        for(int i=0;i<n;i++)  
            MultiplePack(weight[i],Value[i],num[i]);  
           
        cout<<f[limit]<<endl;  
    }  
    return 0;  
}