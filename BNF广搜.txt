#include<iostream>
#include<queue>
using namespace std;
struct node
{
	int x,y;
}Node;
int n,m;
int matrix[100][100];
bool inq[100][100]={false};
int  X[4]={0,0,1,-1};
int Y[4]={1,-1,0,0};

bool judge(int x,int y)
{
	if(x>=n||x<0||y>=m||y<0)
	return false;
	if(matrix[x][y]==0||inq[x][y]==true) return false ;
	return true ;
}
void BFS(int x,int y)
{
	queue<node>q;
	Node.x=x,Node.y=y;
	q.push(Node);
	inq[x][y]==true;
	while(!q.empty())
	{
		node top=q.front();
		q.pop();
		for(int i=0;i<4;i++)
		{
			int newX=top.x+X[i];
			int newY=top.y+Y[i];
			if(judge(newX,newY))
             {
            Node.x=newX,Node.y=newY;
            q.push(Node);
            inq[newX][newY]=true;
			 }
		}
	}
	
}
int main()
{
	cin>>n>>m;
	for(int x=0;x<n;x++)
	for(int y=0;y<m;y++)
	cin>>matrix[x][y];
	int ans=0;
	for(int x=0;x<n;x++)
	for(int y=0;y<m;y++)
	{
		if(matrix[x][y]==1&&inq[x][y]==false)
		{
			ans++;
			BFS(x,y);
		}
	}
	cout<<ans<<endl;
}